the ``101-lazy_matrix_mul`` module
=============================

Using ``lazy_matrix_mul``
----------------------

basic functionalty:
        >>> lazy_matrix_mul = __import__('101-lazy_matrix_mul').lazy_matrix_mul
        >>> lazy_matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4]])
        array([[ 7, 10],
	       [15, 22]])

two authentic different size:
	>>> lazy_matrix_mul([[1, 2]], [[3, 4], [5, 6]])
	array([[13, 16]])

list of list errors:
	>>> lazy_matrix_mul((1,2,3), [4,5,6])
	Traceback (most recent call last):
            ...
        TypeError: m_a must be a list
	
	>>> lazy_matrix_mul([1,2,3], (4,5,6))
	Traceback (most recent call last):
            ...
        TypeError: m_b must be a list
	
	>>> lazy_matrix_mul([1,2,3], [[4,5],[6, 7]])
	Traceback (most recent call last):
            ...
        TypeError: m_a must be a list of lists

	>>> lazy_matrix_mul([[4,5],[6, 7]],[1,2,3])
	Traceback (most recent call last):
            ...
        TypeError: m_b must be a list of lists

emptiness:
	>>> lazy_matrix_mul([],[[1,2],[3,4]])
	Traceback (most recent call last):
            ...
        ValueError: m_a can't be empty

	>>> lazy_matrix_mul([[4,5],[6, 7]],[])
	Traceback (most recent call last):
            ...
        ValueError: m_b can't be empty

	>>> lazy_matrix_mul([[],[]],[[],[]])
	Traceback (most recent call last):
            ...
        ValueError: m_a can't be empty

	>>> lazy_matrix_mul([[1,2],[3,4]],[[],[]])
	Traceback (most recent call last):
            ...
        ValueError: m_b can't be empty

type for only integers or floats:
	>>> lazy_matrix_mul([[1,2],[3,'4']],[[5,6],[7,8]])
	Traceback (most recent call last):
            ...
        TypeError: m_a should contain only integers or floats

	>>> lazy_matrix_mul([[1,2],[3,4]],[[5,[3]],[7,8]])
	Traceback (most recent call last):
            ...
        TypeError: m_b should contain only integers or floats

rectangular matrix:
	>>> lazy_matrix_mul([[1,2],[3,4,9]],[[5,6],[7,8]])
	Traceback (most recent call last):
            ...
        TypeError: each row of m_a must be of the same size

	>>> lazy_matrix_mul([[1,2],[3,4]],[[5,6],[7,8,9]])
	Traceback (most recent call last):
            ...
        TypeError: each row of m_b must be of the same size
	
matrix multiplication validty:
	>>> lazy_matrix_mul([[1,2,10],[3,4,9]],[[5,6],[7,8]])
	Traceback (most recent call last):
            ...
        ValueError: m_a and m_b can't be multiplied


